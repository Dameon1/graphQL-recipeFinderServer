
type Query {  
  me: User
  recipesForUser: [UserRecipes]
  fetchRecipesFromSpoonacular(queryString:String!):[Recipes]
  fetchRecipesFromSpoonacularById(id:Int):Recipes
  fetchRecipesFromSpoonacularInBulk:[Recipes]
}
type Mutation {
  createUser(username: String!,password:String!): User!
  signInUser(username: String!,password:String!):User
  signOutUser: SuccessMessage
  saveRecipe(recipeId:Int): UserRecipes
  deleteRecipe(recipeId:Int):Int
}
type User {
  username: String 
  id:ID 
  password:String!
  resetToken:String
  resetTOkenExpiry: Float
  reason: String
  message: String
  location: String
}
type UserRecipes {
  _id:String!
  recipeId: Int
  createdAt: String 
}
type Recipes {
  instructions:String,
  image:String,
  sourceUrl:String,
  id:Int,
  title:String,  
  usedIngredientCount:Int,
  missedIngredientCount:Int,
  analyzedInstructions: [AnalyzedInstructions]
  errorMessage: String
}
type AnalyzedInstructions {
  steps: [Analyzed]
}
type Analyzed {
  step:String
}

type SuccessMessage {
  message: String
}